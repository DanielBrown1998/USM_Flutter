import java.util.Properties
import java.io.FileInputStream

plugins {
    id "com.android.application"
    // START: FlutterFire Configuration
    id 'com.google.gms.google-services'
    // END: FlutterFire Configuration
    id "kotlin-android"
    // The Flutter Gradle Plugin must be applied after the Android and Kotlin Gradle plugins.
    id "dev.flutter.flutter-gradle-plugin"
}

def localProperties = new Properties()
def keystorePropertiesFile = rootProject.file("../key.properties")
if (keystorePropertiesFile.exists()) {
    localProperties.load(FileInputStream(keystorePropertiesFile))
}

//controlando a versao do app
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader('UTF-8') { reader ->
        localProperties.load(reader)
    }
}

def flutterVersionName = localProperties.getProperty('flutter.build.name') ?: '1.0.0'
def flutterVersionCode = localProperties.getProperty('flutter.build.number') ?: '1'


def calculatedBuildVersion = flutterVersionCode.toInteger()

android {
    namespace = "com.danielbrown.app"
    compileSdk = flutter.compileSdkVersion
    ndkVersion = flutter.ndkVersion

    compileOptions {
        sourceCompatibility = JavaVersion.VERSION_1_8
        targetCompatibility = JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_1_8
    }

    defaultConfig {
        applicationId = "com.danielbrown.app" 
        minSdk = 23
        targetSdk = flutter.targetSdkVersion
        versionCode = calculatedBuildVersion
        versionName = flutterVersionName
        multiDexEnabled = true
    }
    signingConfigs {
        create("release") {
                if (System.getenv()["CI"] != null && System.getenv()["CM_KEYSTORE_PATH"] != null) { // CI=true is exported by Codemagic
                storeFile = file(System.getenv()["CM_KEYSTORE_PATH"])
                storePassword = System.getenv()["CM_KEYSTORE_PASSWORD"]
                keyAlias = System.getenv()["CM_KEY_ALIAS"]
                keyPassword = System.getenv()["CM_KEY_PASSWORD"]
            } else {
                keyAlias = localProperties["keyAlias"] as String
                keyPassword = localProperties["keyPassword"] as String
                storeFile = localProperties["storeFile"]?.let { file(it) }
                storePassword = localProperties["storePassword"] as String
            }
        }
    }
    buildTypes {
        getByName("release") {
            //isMinifyEnabled = false
            signingConfig = signingConfigs.getByName("release")
            signingConfig = signingConfigs.getByName("debug")
        }
    }
}

flutter {
    source = "../.."
}
